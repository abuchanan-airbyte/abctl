#!/usr/bin/env bash
# script for automating the releasing of abctl to various hosts
# will eventually be replaced by a github workflow and/or goreleaser
ABCTL_VERSION="${ABCTL_VERSION:-dev}"
# if ABCTL_VERSION is not dev, ensure that it starts with a 'v'
if [ "$ABCTL_VERSION" != "dev" ]; then
  if [[ "$ABCTL_VERSION" != v* ]]; then
    ABCTL_VERSION="v$ABCTL_VERSION"
  fi
fi

echo "creating release builds for ${ABCTL_VERSION}"

release_dir="build/release"

# abtar
abtar() {
  goos=$1
  goarch=$2
  pushd "$release_dir" > /dev/null
  tar -czf "abctl-$ABCTL_VERSION-$goos-$goarch.tar.gz" "abctl-$ABCTL_VERSION-$goos-$goarch"
  popd > /dev/null
}

# abzip
abzip() {
  goos=$1
  goarch=$2
  pushd "$release_dir" > /dev/null
  zip -q -r "abctl-$ABCTL_VERSION-$goos-$goarch.zip" "abctl-$ABCTL_VERSION-$goos-$goarch"
  popd > /dev/null
}

# abbuild builds and
abbuild() {
  goos=$1
  goarch=$2
  compress=$3
  echo " - $goos/$goarch"
  GOOS="$goos" GOARCH="$goarch" CGO_ENABLED=0 go build -trimpath -o "$release_dir/abctl-$ABCTL_VERSION-$goos-$goarch/" -ldflags "-w -X airbyte.io/abctl/internal/build.Version=${ABCTL_VERSION}" .
  eval $compress "$goos" "$goarch"
}

echo "building darwin"
abbuild "darwin" "amd64" abtar
abbuild "darwin" "arm64" abtar

echo "building linux"
abbuild "linux" "amd64" abtar
abbuild "linux" "arm64" abtar

echo "building windows"
abbuild "windows" "amd64" abzip

echo "completed release builds"